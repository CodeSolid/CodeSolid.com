{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f9a19a8b-62d6-48f3-b4bc-e48fdd8f2c55",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    }
   },
   "source": [
    "# The Inner Product of a Complex Vectors\n",
    "\n",
    "## Overview\n",
    "\n",
    "I recently began viewing Leonard Suskind's awesome introductory Quantum Mechanics course on Youtube, [The Theoretical Minimum](https://www.youtube.com/watch?v=iJfw6lDlTuA&list=PL701CD168D02FF56F).  Toward the end of lecture one, Suskind introduces the Dirac notation for Complex Vector spaces, and how to find the inner product of two complex vectors.  I thought I needed to summarize this material to better understand it, and at the same time show how to implement the idea in Python's numpy.\n",
    "\n",
    "## The Formal Notation\n",
    "\n",
    "A vector is simply an ordered series of numbers.  A complex array can include numbers of the form: $a + b\\textit{i}$, where $\\textit{i} = sqrt{-1}$.\n",
    "\n",
    "\n",
    "\n",
    "The Dirac notation for two complex vectors A, and B, would look like this:\n",
    "\n",
    "$$ |A> $$\n",
    "$$ |B> $$\n",
    "\n",
    "These are assumed to be one-column vectors with the same number of rows.  For example:\n",
    "\n",
    "$\n",
    "|A> = \\pmatrix{2 + 1j\\\\3 - 2j\\\\5 + 1j}\n",
    "$\n",
    "\n",
    "$\n",
    "|B> =\\pmatrix{3 + 2j\\\\1 - 4j\\\\ 6 + 1j}\n",
    "$\n",
    "\n",
    "This \"$|\\space \\textit{symbol}\\space >$\" notation is called a ket, which is an unusual name for anything.  It will make sense in a minute, but before we get to that, let's see how we would implement what we just wrote in numpy.\n",
    "\n",
    "Note that in Dirac notation, uppercase letters are often used for vectors, though the convention in most Linear Algebra courses is to use lowercase letters for vectors.  In Linear Algebra, this distinguishes them from matrices, which use uppercase letters.  \n",
    "\n",
    "## Implementing It In Python\n",
    "\n",
    "For our purposes, we are going to stick to one dimensional numpy arrays of three elements each (in this case). Numpy handles vectors like this better and more simply for what we'll eventually need to do, even if it does mean that ideas like \"transpose\" end up being a no-op.  Trying to work with vertical vectors in numpy complicates the code and creates more work for us."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7415a5c0-7c06-4c14-85b2-338c84fbd4b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A = \n",
      " [2.+1.j 3.-2.j 5.+1.j]\n",
      "B = \n",
      " [3.+2.j 1.-4.j 6.+1.j]\n",
      "True True\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Create a complex numpy array.\n",
    "A = np.array([2 + 1j, 3 - 2j, 5 + 1j])\n",
    "# A = np.vstack(A)\n",
    "print(\"A = \\n\", A)\n",
    "\n",
    "# Create another array\n",
    "# Create another array\n",
    "B = np.array([3 + 2j, 1 - 4j, 6 + 1j])\n",
    "# B = np.vstack(B)\n",
    "print(\"B = \\n\", B)\n",
    "\n",
    "# Show that transpose will end up being effectively a no-op\n",
    "print(A.shape == A.transpose().shape, A.all() == A.transpose().all())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fb1a6c8-fa5e-4a65-838a-e0368bb0214e",
   "metadata": {},
   "source": [
    "## Back to the Abstract Math\n",
    "\n",
    "Now that we have two vectors to work with, I promised to clear up the word ket.  Let's do that now.  The Dirac notation for an inner product of the two vectors looks like this:\n",
    "\n",
    "$$ \\lt A|B \\gt $$\n",
    "\n",
    "Ealier we expressed the two vectors these using a ket notation: \n",
    "\n",
    "$$ |A> $$\n",
    "$$ |B> $$\n",
    "\n",
    "Now it looks like something has become of the \"A\" term. It has moved to the beginning of the brackets, so written individually, it would look like this:\n",
    "\n",
    "$$ \\lt A| $$\n",
    "\n",
    "This is called a \"bra\", so Dirac notation is also referred to as \"bra-ket\" notation.  If this is looking to you like a cute pun on the word \"bracket,\" you may congratulate yourself on paying attention.  That's exactly what it is!\n",
    "\n",
    "But this bra is not just the same A vector \"moved over.\"\n",
    "\n",
    "We need to do two things to it to make it into a bra, also known as the \"dual\" of A.\n",
    "\n",
    "First, as a notational convention, we transpose it, turning it into a row vector.  So instead of this:\n",
    "\n",
    "$$\n",
    "\\newcommand\\mycolv[1]{\\begin{pmatrix}#1\\end{pmatrix}}\n",
    "\\mycolv{2 + 1j\\\\3 - 2j\\\\5 + 1j}\n",
    "$$\n",
    "\n",
    "we get this:\n",
    "\n",
    "$$\n",
    "\\newcommand\\myrowv[1]{\\begin{pmatrix}#1\\end{pmatrix}}\n",
    "\\mycolv{2 + 1j, 3 - 2j, 5 + 1j}\n",
    "$$\n",
    "\n",
    "We showed earlier that this is a no-op in Python, but we mention it here for completeness.\n",
    "\n",
    "Next, we need to take the conjugate of each term, which (in case you've forgotten it like I had) simply means flipping the sign of the imaginary part.\n",
    "\n",
    "Thus our final result for the $\\lt A |$ \n",
    "term would be:  $\\pmatrix{2 - 1j, 3 + 2j, 5 - 1j}$.\n",
    "\n",
    "Doing those two things to a complex vector A is called a \"conjugate transpose\", it's also called the \"dual\" of A.  For a finite vector space, this is also called a \"Hermitian adjoint\"\n",
    "\n",
    "So we can say that given a finite complex vector:\n",
    "\n",
    "The \"dual of A\" = $\\lt A |$ = \"the conjugate transpose of A\" == \"the Hermitian adjoint of A\".\n",
    "\n",
    "I think that's enough words for the same thing for now.\n",
    "\n",
    "## Complex Inner Products in Numpy\n",
    "\n",
    "The documentation for numpy.inner says this:\n",
    "\n",
    "<blockquote>\n",
    "Inner product of two arrays.\n",
    "\n",
    "Ordinary inner product of vectors for 1-D arrays (without complex conjugation), in higher dimensions a sum product over the last axes.\n",
    "</blockquote>\n",
    "\n",
    "Our choice of a 1-D numpy array as a starting point turned out to be exactly what numpy's \"inner\" function was expecting.  We'll need to conjugate the numpy array \"ourselves\", but numpy makes it easy with a function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4b374996-1a74-4120-8f79-a96286fa72d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find A's conjugate\n",
    "A_dual = A.conjugate()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f68877b-0ac8-4177-8f33-569bfd6242d3",
   "metadata": {},
   "source": [
    "## Find the inner product\n",
    "With all this out of the way, we're now ready to find the inner product:\n",
    "\n",
    "$$ \\lt A|B \\gt $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a842fd24-d626-43df-8cc7-68d40d336352",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.complex128(50-10j)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inner_product = np.inner(A_dual, B)\n",
    "inner_product"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94b4d5d7-4a86-42b6-a4de-28560d297436",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Encapsulating it as a function\n",
    "\n",
    "I wrote this article partly as a way to review the formal math notation and understand how it relates to Python, but if what you really wanted was just a simple Python function to do it for you, here you go."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d91a966b-f689-405f-9662-e5cc1c74e9f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def complex_inner_product(A, B):\n",
    "    ### Find the inner product of two equal length complex numpy 1-D arrays\n",
    "    assert(A.shape == B.shape)\n",
    "    A_dual = A.conjugate()\n",
    "    return np.inner(A_dual, B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b3ff9f98-0e78-4819-9507-a387e979d3a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# An informal test for our function\n",
    "# Compare our earlier result with what our new function returns.  We should see no output\n",
    "matches = inner_product == complex_inner_product(A, B)\n",
    "assert(matches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bff7b5b5-230a-4585-942b-1961b25983fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test the postulate that <A|B> is related to <B|A> as a conjugate, \n",
    "# assuming they are complex numbers.  Again, we should see no output for this cell.\n",
    "\n",
    "reversed = complex_inner_product(B, A)\n",
    "assert reversed == inner_product.conjugate()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  },
  "tags": [
   "created_2025_06_29"
  ]
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
