{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "560d2634-c87a-46ae-8bc4-51f374f82db9",
   "metadata": {},
   "source": [
    "# Using Desmos Graphs in Jupyter Notebooks\n",
    "\n",
    "I recently finished Calculus I as the [World's Oldest Math Major](/worlds-oldest-math-major). In class and on exams, I had the pleasure of competing with people a third my age in hunting and pecking on a TI-84 calculator. \n",
    "\n",
    "In contrast, at home, I only spent as much time as I needed on that device to do well on exams.  Instead, my preferred tools for calculation and graphing were a Python stack consisting of an open IPython terminal with SymPy installed and a browser opened to [https://www.desmos.com/calculator](https://www.desmos.com/calculator) for graphing.\n",
    "\n",
    "Spinning up a quick graph to check a result I calculated by hand, for example, would take me probably five times as long as it would in Desmos.  (If I did it all the time, I could probably cut that down to three times as long, but that's still not great).\n",
    "\n",
    "Going back and forth between the two was not a problem in practice while taking the course.  However, given my past life a software developer, I wondered how easy it would be to integrate them.  This article is a discussion of what I discovered.  \n",
    "\n",
    "## Desmos and its API\n",
    "\n",
    "My first step was to learn about the [Desmos API](https://www.desmos.com/api/v1.9/docs/index.html).  Not surprisingly for a graphic calculator tool that runs in a web browser, the authors published the API in JavaScript. Since SymPy and my other favorite non-graphics tools run in Python, I first researched how to run JavaScript from a Jupyter code cell written in Python.  I briefly tried one of the tools that came up early in the search results, the <a rel=\"nofollow\" href=\"https://github.com/jorgehpo/notebookJS\">NotebookJS</a> library.  At first this didn't work, and once I'd convinced myself that I was running it correctly, I decided that given the lack of recent updates, this probably wasn't the best choice.  (In fairness to the author, this could be a platform-specific thing -- not all Python libraries work without more wrangling on an Apple Silicon Python environment).\n",
    "\n",
    "## Using the IPython.display.Javascript class\n",
    "Fortunately, I found that Jupyter itself provided an answer to the question in the form of a class in IPython's display package, [IPython.display.Javascript](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.Javascript), and I reasoned that even if this approach might be less full-featured, it was probably better tested against all the lastest Jupyter releases.\n",
    "\n",
    "This constructor (i.e., the __init__ method) of this Javascript class takes a script as input along with a list of libraries to load prior to running the script.  It returns an object that can be passed to the display method to ouput the results of evaluating the JavaScript.\n",
    "\n",
    "Given this information and the Desmos API samples, it was a pretty easy task to display a Desmos graph. The code for my first pass at doing this is below, which we'll discuss below the graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "568b1740-ba82-498c-9b38-62f6558bb063",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "new Promise(function(resolve, reject) {\n",
       "\tvar script = document.createElement(\"script\");\n",
       "\tscript.onload = resolve;\n",
       "\tscript.onerror = reject;\n",
       "\tscript.src = \"https://www.desmos.com/api/v1.9/calculator.js?apiKey=dcb31709b452b1cf9dc26972add0fda6\";\n",
       "\tdocument.head.appendChild(script);\n",
       "}).then(() => {\n",
       "\n",
       "    // Important, need to reset height or the graph will not be visible.\n",
       "    element.style.height = \"480px\";\n",
       "\n",
       "    // Create the Desmos calculator object\n",
       "    var calculator = Desmos.GraphingCalculator(element);\n",
       "\n",
       "    // Do a \"Calculus 1\" friendly example, a curve and a tangent line through a point.\n",
       "    calculator.setExpression({id:'exp1', latex: 'y=x^2 + 2'});\n",
       "    calculator.setExpression({id:'exp2', latex: 'y=2x + 1'});\n",
       "\n",
       "});"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import Javascript, display\n",
    "\n",
    "# Write the JavaScript\n",
    "script = \"\"\"\n",
    "    // Important, need to reset height or the graph will not be visible.\n",
    "    element.style.height = \"480px\";\n",
    "\n",
    "    // Create the Desmos calculator object\n",
    "    var calculator = Desmos.GraphingCalculator(element);\n",
    "\n",
    "    // Do a \"Calculus 1\" friendly example, a curve and a tangent line through a point.\n",
    "    calculator.setExpression({id:'exp1', latex: 'y=x^2 + 2'});\n",
    "    calculator.setExpression({id:'exp2', latex: 'y=2x + 1'});\n",
    "\"\"\"\n",
    "\n",
    "# This uses the demo API key for now\n",
    "api_url = \"https://www.desmos.com/api/v1.9/calculator.js?apiKey=dcb31709b452b1cf9dc26972add0fda6\"\n",
    "\n",
    "# Create the Javascript object in Python and display it.\n",
    "js = Javascript(script, lib=[api_url])\n",
    "display(js)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8f89eb5b-afa1-400c-928d-2598ddd0109c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(<class 'sympy.core.relational.Relational'>,)\n",
      "(<class 'sympy.logic.boolalg.Boolean'>, <class 'sympy.core.evalf.EvalfMixin'>)\n",
      "(<class 'object'>,)\n",
      "(<class 'sympy.core.expr.Expr'>, <class 'sympy.core.operations.AssocOp'>)\n",
      "(<class 'sympy.core.basic.Basic'>, <class 'sympy.core.evalf.EvalfMixin'>)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'y = x^{2}'"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sympy import symbols, Eq, latex\n",
    "x, y = symbols(\"x y\")\n",
    "eq = Eq(y, x**2)\n",
    "print(type(eq).__bases__)\n",
    "print(sp.core.relational.Relational.__bases__)\n",
    "print(sp.core.evalf.EvalfMixin.__bases__)\n",
    "\n",
    "f = 2*x + 3\n",
    "print(type(f).__bases__)\n",
    "print(sp.core.expr.Expr.__bases__)\n",
    "\n",
    "latex(eq)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "960c85e1-3c39-4124-86c1-64b850ee92b7",
   "metadata": {},
   "source": [
    "calculator.setExpression({id:'exp1', latex: 'y=x^2 +t+1'});\n",
    "calculator.setExpression({id:'exp2', latex: 'y=2x+t'});\n",
    "calculator.setExpression({id:'exp3', latex: 't=1'});"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a87ec232-d8b0-479f-86ce-b97a61211c79",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
