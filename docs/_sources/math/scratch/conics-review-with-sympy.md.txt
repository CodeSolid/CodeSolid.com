---
jupytext:
  formats: md:myst
  text_representation:
    extension: .md
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.16.1
kernelspec:
  display_name: Python 3 (ipykernel)
  language: python
  name: python3
---

# Conic Sections in Sympy, a Brief Introduction

```{code-cell} ipython3
import matplotlib as mp
from sympy import symbols, Eq, plot_implicit, latex
```

```{code-cell} ipython3
x, y, a,b = symbols("x y a b")
a = 1
b = 3
```

```{code-cell} ipython3
# JCL Todo explain the functions

ellipse =   (y**2)/(b**2) + (x**2)/(a**2) - 1 
hyperbola = (y**2)/(b**2) - (x**2)/(a**2) - 1 

# Another way to write the function without zeroing out one side.
hyperbola2 = Eq((y**2)/(b**2) - (x**2)/(a**2), 1)
```

```{code-cell} ipython3
# Could break code out during the explanation phase and then do each separately, 
# then combine the ellipse and hyperbola

%matplotlib inline
p1 = plot_implicit(ellipse, show=False, xlabel="", ylabel="")
p2 = plot_implicit(hyperbola,show=False, xlabel="", ylabel="")
p1.extend(p2)
p1.show()
```

```{code-cell} ipython3
# Now do it Euclid's way
# Note, it breaks down at  radii > 5 -- use that to introduce symplot

circle1 = Circle(Point(0,0), 5)
print(circle1.center)
print(circle1.radius)

# Todo Show latex separately -- this is really an aside.
# print(latex(circle1.equation()))
print(circle1.equation())
```

```{code-cell} ipython3
%matplotlib inline
p = plot_implicit(circle1.equation(), show=False)
p.aspect_ratio=(1,1) 
grid_max = 10
grid_min = -10
lims = (grid_min, grid_max)
p.xlim = lims
p.ylim = lims
p.show()
```

```{code-cell} ipython3

```
